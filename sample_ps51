library(dplyr)
library(Seurat)
library(patchwork)

# Load the sample4 dataset
sample4.data <- Read10X(data.dir = "../data/sample_ps51.2/sample350//outs/filtered_feature_bc_matrix/")
# Initialize the Seurat object with the raw (non-normalized data).
sample4 <- CreateSeuratObject(counts = sample4.data, project = "sample4", min.cells = 3, min.features = 200)
sample4
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
sample4[["percent.mt"]] <- PercentageFeatureSet(sample4, pattern = "^mt-")
# Visualize QC metrics as a violin plot
VlnPlot(sample4, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.

plot1 <- FeatureScatter(sample4, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(sample4, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
sample4 <- subset(sample4, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
sample4 <- NormalizeData(sample4)
sample4 <- FindVariableFeatures(sample4, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(sample4), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(sample4)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(sample4)
sample4 <- ScaleData(sample4, features = all.genes)
sample4 <- RunPCA(sample4, features = VariableFeatures(object = sample4))
# Examine and visualize PCA results a few different ways
print(sample4[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(sample4, dims = 1:2, reduction = "pca")
DimPlot(sample4, reduction = "pca")
DimHeatmap(sample4, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(sample4, dims = 1:15, cells = 500, balanced = TRUE)
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# computation time
sample4 <- JackStraw(sample4, num.replicate = 100)
sample4 <- ScoreJackStraw(sample4, dims = 1:20)
JackStrawPlot(sample4, dims = 1:15)
ElbowPlot(sample4)

#Cluster cells
sample4 <- FindNeighbors(sample4, dims = 1:10)
sample4 <- FindClusters(sample4, resolution = 0.5)
# Look at cluster IDs of the first 5 cells
head(Idents(sample4), 5)
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages =
# 'umap-learn')
sample4 <- RunUMAP(sample4, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(sample4, reduction = "umap")
saveRDS(sample4, file = "../data/sample_ps51.2/sample4.rds")

# Find differentially expressed features(cluster biomarkers)
# find all markers of cluster 2
cluster2.markers <- FindMarkers(sample4, ident.1 = 2, min.pct = 0.25)
head(cluster2.markers, n = 5)

# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(sample3, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25)
head(cluster5.markers, n = 5)
# find markers for every cluster compared to all remaining cells, report only the positive ones
sample.markers <- FindAllMarkers(sample4, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
sample.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_log2FC)
cluster0.markers <- FindMarkers(sample4, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
VlnPlot(sample4, features = c("Actb", "Tnnc1"))
# you can plot raw counts as well
VlnPlot(sample4, features = c("Postn", "Rbp1"), slot = "counts", log = TRUE)
FeaturePlot(sample4, features = c("Postn", "Actb", "Dbi", "Cthrc1", "Rbp1", "Rgs5", "Mdk", "Mfap2",
                                  "Myl4"))
top10 <- sample.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
DoHeatmap(sample4, features = top10$gene) + NoLegend()

new.cluster.ids <- c("MC + VMSC", "VMSC")
names(new.cluster.ids) <- levels(sample4)
sample4 <- RenameIdents(sample4, new.cluster.ids)
DimPlot(sample4, reduction = "umap", label = TRUE, pt.size = 1.8) + NoLegend()
saveRDS(sample4, file = "../data/sample_ps51.2/sample4_final.rds")
